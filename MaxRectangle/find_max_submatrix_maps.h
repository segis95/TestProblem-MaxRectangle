// Решение основано на методе динамического программирования.  Рассмотрим строку матрицы с номером
// h > 0. Пусть в этой строке в позиции w стоит единица, которой предшествуют k подряд идущих единиц:
//
// строка h: ....1111..11...
//                      ^позиция w
//
// Если для строки h-1 для каждой позиции v известна МАКСИМАЛЬНАЯ ГЛУБИНА слоя единиц для каждой
// возможной ШИРИНЫ слоя единиц, заканчивающегося в v, то можно подсчитать динамически эти же
// величины и для позиций строки h, зная k. Для хранения пар <ШИРИНА --> МАКСИМАЛЬНАЯ ГЛУБИНА>
// используется массив словарей размера длины строки матрицы.
//
// Решение имеет сложность по времени строго говоря O(m*n^2logn) и использует O(m*n) дополнительной
// памяти. Поскольку серии подряд идущих единиц в строках могут прерываться нулями и ГЛУБИНА будет
// продолжима лишь для ограниченного числа ШИРОТ. Пример худшего случая значительного размера будет
// приведен в тестах.

#pragma once
#include "data_structures.h"

Rectangle find_max_submatrix_maps(std::vector<std::vector<bool>>& matrix);
